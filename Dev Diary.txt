- First feature : implementing Wave System
I have to make a choice: implementing a timed system, with a timer always running (and waves overlapping) , or implementing a system where a wave spawns only when the previous one ended.
I chose the latter. ( Reason: while more difficult, being able to understand when all enemies are defeated can be useful for gameplay systems, so looking into it method is also more interesting).
Enemy spawner is re-organized as a state machine, with a buffer/wait state before each wave.
To understand if all enemies are defeated, a counter variable is added to the engine. It's increased every time an enemy is spawned, decreased when an enemy is killed. 
The increment is easy to implement as all the related logic is inside the EnemySpawningEngine.
The decrement requires some kind of event that allows the engine to know when an enemy is killed.
I initially implemented it using an observer, which was passed to the SpawningEngine.
Then I wanted to try to re-implement it using the Sequencer. I added another step to the EnemyDamageSequence, which call the EnemySpawnEngine. Inside its step, the engine decreases the counter.

Problem - timing the enemy spawns: 
The spawn logic is inside a function which is called inside the IntervaledTick method.
Initially I wanted to put some delay between each enemy spawn (in the same wave), but I didn't manage to call a second IEnumerator from inside IntervaledTick. 
So I made all the enemies spawn all together, and the result is ok.
I will eventually improve it later by checking better how the TaskRunner works.

- Pickups
I created a common interface for all pickups components(IPickUpComponent), and then specialized it for ammo and health. It contains a delegate field that will be set by the engine. That function is used on TriggerEnter.
I created a component for Pickupspawning, similar to the one for the enemies.




Pickup Sounds:
I want to add a sound when a pickup is activated. 
I create an appropriate component that contains an audiosource and an audioclip, and include that in the pickup entity. I create and an engine that plays that audioclip as step of the healing sequence.
During testing, the sound is not played properly because the entity gets destroyed during the event, as well as the game object containing the sound.
